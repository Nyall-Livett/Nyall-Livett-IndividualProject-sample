/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 16 16:18:53 GMT 2024
 */

package com.iluwatar.parameter.object;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import com.iluwatar.parameter.object.ParameterObject;
import com.iluwatar.parameter.object.SortOrder;
import org.evosuite.runtime.EvoRunnerJUnit5;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.jupiter.api.extension.RegisterExtension;

 
public class ParameterObject_ESTest  {


  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test00()  throws Throwable  {
      ParameterObject.Builder parameterObject_Builder0 = ParameterObject.newBuilder();
      ParameterObject parameterObject0 = parameterObject_Builder0.build();
      SortOrder sortOrder0 = SortOrder.DESC;
      parameterObject0.setSortOrder(sortOrder0);
      parameterObject0.toString();
      assertEquals(SortOrder.DESC, parameterObject0.getSortOrder());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test01()  throws Throwable  {
      ParameterObject.Builder parameterObject_Builder0 = ParameterObject.newBuilder();
      ParameterObject parameterObject0 = parameterObject_Builder0.build();
      assertEquals("price", parameterObject0.getSortBy());
      
      parameterObject0.setSortBy("price");
      String string0 = parameterObject0.toString();
      assertEquals("ParameterObject[type='null', sortBy='price', sortOrder='ASC']", string0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test02()  throws Throwable  {
      ParameterObject.Builder parameterObject_Builder0 = ParameterObject.newBuilder();
      ParameterObject parameterObject0 = parameterObject_Builder0.build();
      SortOrder sortOrder0 = SortOrder.DESC;
      parameterObject0.setSortOrder(sortOrder0);
      parameterObject0.getSortOrder();
      assertEquals(SortOrder.DESC, parameterObject0.getSortOrder());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test03()  throws Throwable  {
      ParameterObject.Builder parameterObject_Builder0 = ParameterObject.newBuilder();
      ParameterObject.Builder parameterObject_Builder1 = parameterObject_Builder0.withType("");
      ParameterObject parameterObject0 = parameterObject_Builder1.build();
      String string0 = parameterObject0.getType();
      assertEquals("price", parameterObject0.getSortBy());
      assertEquals("", string0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test04()  throws Throwable  {
      ParameterObject.Builder parameterObject_Builder0 = ParameterObject.newBuilder();
      ParameterObject parameterObject0 = parameterObject_Builder0.build();
      parameterObject0.setSortBy((String) null);
      String string0 = parameterObject0.getSortBy();
      assertNull(string0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test05()  throws Throwable  {
      ParameterObject.Builder parameterObject_Builder0 = ParameterObject.newBuilder();
      ParameterObject parameterObject0 = parameterObject_Builder0.build();
      parameterObject0.setType("=");
      String string0 = parameterObject0.getType();
      assertEquals("price", parameterObject0.getSortBy());
      assertEquals("=", string0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test06()  throws Throwable  {
      ParameterObject.Builder parameterObject_Builder0 = ParameterObject.newBuilder();
      ParameterObject parameterObject0 = parameterObject_Builder0.build();
      assertEquals("price", parameterObject0.getSortBy());
      
      parameterObject0.setSortBy("");
      parameterObject0.getSortBy();
      assertEquals("", parameterObject0.getSortBy());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test07()  throws Throwable  {
      ParameterObject.Builder parameterObject_Builder0 = ParameterObject.newBuilder();
      SortOrder sortOrder0 = SortOrder.ASC;
      ParameterObject.Builder parameterObject_Builder1 = parameterObject_Builder0.sortOrder(sortOrder0);
      ParameterObject parameterObject0 = parameterObject_Builder1.build();
      assertEquals("price", parameterObject0.getSortBy());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test08()  throws Throwable  {
      ParameterObject.Builder parameterObject_Builder0 = ParameterObject.newBuilder();
      parameterObject_Builder0.sortBy("com.iluwatar.parameter.object.ParameterObject$Builder");
      ParameterObject parameterObject0 = parameterObject_Builder0.build();
      assertEquals("com.iluwatar.parameter.object.ParameterObject$Builder", parameterObject0.getSortBy());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test09()  throws Throwable  {
      ParameterObject.Builder parameterObject_Builder0 = ParameterObject.newBuilder();
      parameterObject_Builder0.sortBy("");
      ParameterObject parameterObject0 = parameterObject_Builder0.build();
      assertEquals("price", parameterObject0.getSortBy());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test10()  throws Throwable  {
      ParameterObject.Builder parameterObject_Builder0 = ParameterObject.newBuilder();
      ParameterObject parameterObject0 = parameterObject_Builder0.build();
      String string0 = parameterObject0.getSortBy();
      assertEquals("price", string0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test11()  throws Throwable  {
      ParameterObject.Builder parameterObject_Builder0 = ParameterObject.newBuilder();
      ParameterObject parameterObject0 = parameterObject_Builder0.build();
      String string0 = parameterObject0.getType();
      assertEquals("price", parameterObject0.getSortBy());
      assertNull(string0);
  }
}
