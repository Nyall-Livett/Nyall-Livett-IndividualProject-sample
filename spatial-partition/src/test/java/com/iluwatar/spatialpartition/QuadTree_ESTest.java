/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 16 17:03:26 GMT 2024
 */

package com.iluwatar.spatialpartition;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iluwatar.spatialpartition.Bubble;
import com.iluwatar.spatialpartition.Point;
import com.iluwatar.spatialpartition.QuadTree;
import com.iluwatar.spatialpartition.Rect;
import java.util.Collection;
import org.evosuite.runtime.EvoRunnerJUnit5;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.jupiter.api.extension.RegisterExtension;

 
public class QuadTree_ESTest  {


  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test00()  throws Throwable  {
      double double0 = 1639.9;
      Rect rect0 = new Rect(1639.9, 1639.9, 1639.9, 1639.9);
      double double1 = (-1.0);
      Rect rect1 = new Rect((-1.0), 1639.9, (-1.0), 0.0);
      double double2 = 0.0;
      Rect rect2 = new Rect(0.0, 0.0, 0.0, 1639.9);
      QuadTree quadTree0 = new QuadTree(rect2, 0);
      Point<Object> point0 = (Point<Object>) mock(Point.class, new ViolatedAssumptionAnswer());
      quadTree0.insert(point0);
      Point<Object> point1 = null;
      // Undeclared exception!
      try { 
        quadTree0.insert((Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test01()  throws Throwable  {
      Rect rect0 = new Rect(1639.9, 1639.9, 1639.9, 1639.9);
      double double0 = 0.0;
      Rect rect1 = new Rect((-1.0), 0.0, 1639.9, 0.0);
      QuadTree quadTree0 = new QuadTree(rect1, 0);
      Point<Object> point0 = (Point<Object>) mock(Point.class, new ViolatedAssumptionAnswer());
      quadTree0.insert(point0);
      Point<Object> point1 = null;
      // Undeclared exception!
      try { 
        quadTree0.insert((Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test02()  throws Throwable  {
      Rect rect0 = new Rect(1639.9, 1639.9, 1639.9, 1639.9);
      Rect rect1 = new Rect((-1.0), 0.0, 1639.9, 0.0);
      int int0 = 0;
      QuadTree quadTree0 = new QuadTree(rect1, 0);
      Point<Object> point0 = (Point<Object>) mock(Point.class, new ViolatedAssumptionAnswer());
      quadTree0.insert(point0);
      Point<Object> point1 = null;
      // Undeclared exception!
      try { 
        quadTree0.insert((Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test03()  throws Throwable  {
      Rect rect0 = new Rect(0.0, 0.0, 0.0, 0.0);
      rect0.height = (-180.0);
      rect0.coordinateX = 0.0;
      QuadTree quadTree0 = new QuadTree(rect0, 690);
      Bubble bubble0 = new Bubble((-1), 0, 690, 0);
      Rect rect1 = new Rect(0.0, 1.0, 1600.65, 708.989112444201);
      // Undeclared exception!
      try { 
        quadTree0.query(rect1, (Collection<Point>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test04()  throws Throwable  {
      Rect rect0 = new Rect(1639.9, 1639.9, 1639.9, 1639.9);
      QuadTree quadTree0 = new QuadTree(rect0, 1709);
      Bubble bubble0 = new Bubble(1709, 1709, 1709, 1709);
      quadTree0.insert(bubble0);
      assertEquals(1709, bubble0.coordinateY);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test05()  throws Throwable  {
      Rect rect0 = new Rect((-452.0), (-2450.5), (-2450.5), (-452.0));
      rect0.coordinateY = 662.8661629;
      rect0.width = (-3349.0784003241015);
      rect0.height = 662.8661629;
      QuadTree quadTree0 = new QuadTree(rect0, 0);
      Rect rect1 = new Rect(662.8661629, (-1.0), 662.8661629, 1.0);
      QuadTree quadTree1 = new QuadTree(rect0, (-1885));
      quadTree1.query(rect1, (Collection<Point>) null);
      quadTree1.query(rect0, (Collection<Point>) null);
      quadTree0.query(rect1, (Collection<Point>) null);
      quadTree0.boundary = rect0;
      quadTree0.query(rect1, (Collection<Point>) null);
      quadTree0.query(rect1, (Collection<Point>) null);
      rect1.height = 662.8661629;
      quadTree0.query(rect1, (Collection<Point>) null);
      Point<Object> point0 = (Point<Object>) mock(Point.class, new ViolatedAssumptionAnswer());
      quadTree0.insert(point0);
      quadTree0.query(rect0, (Collection<Point>) null);
      quadTree1.query(quadTree0.boundary, (Collection<Point>) null);
      quadTree1.divide();
      Rect rect2 = new Rect(0, (-1885), 1.0, 0.0);
      Collection<Point> collection0 = (Collection<Point>)quadTree0.query(rect2, (Collection<Point>) null);
      assertNull(collection0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test06()  throws Throwable  {
      Rect rect0 = new Rect(0.0, 0.0, 0.0, 0.0);
      rect0.height = (-180.0);
      rect0.coordinateX = 0.0;
      QuadTree quadTree0 = new QuadTree(rect0, 690);
      Bubble bubble0 = new Bubble((-1), 0, 690, 0);
      quadTree0.insert(bubble0);
      quadTree0.query(rect0, (Collection<Point>) null);
      QuadTree quadTree1 = new QuadTree(rect0, (-2221));
      assertFalse(quadTree1.equals((Object)quadTree0));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test07()  throws Throwable  {
      Rect rect0 = new Rect(1639.9, 1639.9, 0.0, 0.0);
      QuadTree quadTree0 = new QuadTree(rect0, 1709);
      // Undeclared exception!
      try { 
        quadTree0.insert((Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test08()  throws Throwable  {
      Rect rect0 = new Rect(0.0, 0.0, 0.0, 0.0);
      rect0.coordinateX = 0.0;
      rect0.coordinateY = (-1.0);
      rect0.width = (-4737.0299);
      QuadTree quadTree0 = new QuadTree(rect0, 365);
      quadTree0.points = null;
      rect0.height = 0.0;
      quadTree0.divide();
      Bubble bubble0 = new Bubble((-2262), (-2262), (-1711), (-2262));
      bubble0.coordinateY = 0;
      quadTree0.insert(bubble0);
      assertEquals(0, bubble0.coordinateY);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test09()  throws Throwable  {
      Rect rect0 = new Rect(0.0, 0.0, 0.0, 0.0);
      QuadTree quadTree0 = new QuadTree(rect0, 1709);
      Point<Object> point0 = (Point<Object>) mock(Point.class, new ViolatedAssumptionAnswer());
      quadTree0.insert(point0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test10()  throws Throwable  {
      Rect rect0 = new Rect(53.0, 53.0, (-2055.0862150984), (-2055.0862150984));
      QuadTree quadTree0 = new QuadTree(rect0, 813);
      QuadTree quadTree1 = quadTree0.southwest;
      quadTree0.southeast = null;
      quadTree0.divide();
      quadTree0.divide();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test11()  throws Throwable  {
      Rect rect0 = new Rect((-2612.6439948), (-2612.6439948), (-2612.6439948), 0.0);
      QuadTree quadTree0 = new QuadTree(rect0, 1602);
      Bubble bubble0 = new Bubble(1602, 1602, 0, 1602);
      quadTree0.insert(bubble0);
      assertEquals(0, bubble0.id);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test12()  throws Throwable  {
      Rect rect0 = new Rect((-1036.3923547067438), (-1036.3923547067438), (-1036.3923547067438), 853.6);
      QuadTree quadTree0 = new QuadTree(rect0, (-1));
      QuadTree quadTree1 = quadTree0.southwest;
      quadTree0.divide();
      Point<Object> point0 = (Point<Object>) mock(Point.class, new ViolatedAssumptionAnswer());
      quadTree0.insert(point0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test13()  throws Throwable  {
      Rect rect0 = new Rect(0.0, 0.0, 0.0, 0.0);
      rect0.height = (-180.0);
      rect0.coordinateX = 0.0;
      QuadTree quadTree0 = new QuadTree(rect0, 690);
      Bubble bubble0 = new Bubble((-1), 0, 690, 0);
      quadTree0.insert(bubble0);
      quadTree0.query(rect0, (Collection<Point>) null);
      quadTree0.query(rect0, (Collection<Point>) null);
      quadTree0.query(rect0, (Collection<Point>) null);
      quadTree0.query(rect0, (Collection<Point>) null);
      Collection<Point> collection0 = (Collection<Point>)quadTree0.query(rect0, (Collection<Point>) null);
      assertNull(collection0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test14()  throws Throwable  {
      Rect rect0 = new Rect(1639.9, 1639.9, 1639.9, 1639.9);
      QuadTree quadTree0 = new QuadTree(rect0, 1709);
      // Undeclared exception!
      try { 
        quadTree0.query(rect0, (Collection<Point>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test15()  throws Throwable  {
      Rect rect0 = new Rect(2383.96, 2.0, 2146.0268, 340.69519175110895);
      rect0.coordinateX = 2383.96;
      rect0.width = 2.0;
      rect0.height = 4.0;
      rect0.coordinateX = 0.0;
      QuadTree quadTree0 = new QuadTree(rect0, 0);
      QuadTree quadTree1 = quadTree0.southwest;
      // Undeclared exception!
      try { 
        quadTree0.query(rect0, (Collection<Point>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }
}
