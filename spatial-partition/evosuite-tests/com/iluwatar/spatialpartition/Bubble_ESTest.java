/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 16 14:58:24 GMT 2024
 */

package com.iluwatar.spatialpartition;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iluwatar.spatialpartition.Bubble;
import com.iluwatar.spatialpartition.Point;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunnerJUnit5;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.jupiter.api.extension.RegisterExtension;

@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Bubble_ESTest extends Bubble_ESTest_scaffolding {
@RegisterExtension
  static EvoRunnerJUnit5 runner = new EvoRunnerJUnit5(Bubble_ESTest.class);

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test00()  throws Throwable  {
      Bubble bubble0 = new Bubble(2, 2, 2, 2);
      LinkedList<Bubble> linkedList0 = new LinkedList<Bubble>();
      HashMap<Integer, Bubble> hashMap0 = new HashMap<Integer, Bubble>();
      linkedList0.add(bubble0);
      hashMap0.put((Integer) 2, bubble0);
      Bubble bubble1 = new Bubble(2, 1, 1, 2);
      bubble1.handleCollision(linkedList0, hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test01()  throws Throwable  {
      Bubble bubble0 = new Bubble(0, 0, 0, 0);
      boolean boolean0 = bubble0.touches(bubble0);
      assertTrue(boolean0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test02()  throws Throwable  {
      Bubble bubble0 = new Bubble(1, 3, (-19), 3);
      bubble0.move();
      bubble0.move();
      assertEquals(1, bubble0.coordinateY);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test03()  throws Throwable  {
      Bubble bubble0 = new Bubble((-610), (-610), (-610), (-610));
      HashMap<Integer, Bubble> hashMap0 = new HashMap<Integer, Bubble>();
      bubble0.pop(hashMap0);
      assertEquals((-610), bubble0.id);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test04()  throws Throwable  {
      Bubble bubble0 = new Bubble((-610), (-610), (-610), (-610));
      // Undeclared exception!
      try { 
        bubble0.touches((Bubble) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.iluwatar.spatialpartition.Bubble", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test05()  throws Throwable  {
      Bubble bubble0 = new Bubble(2536, 2536, 2536, 0);
      // Undeclared exception!
      try { 
        bubble0.pop((Map<Integer, Bubble>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.iluwatar.spatialpartition.Bubble", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test06()  throws Throwable  {
      Bubble bubble0 = new Bubble(3, 3, 3, 3);
      HashMap<Integer, Bubble> hashMap0 = new HashMap<Integer, Bubble>();
      // Undeclared exception!
      try { 
        bubble0.handleCollision((Collection<? extends Point>) null, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.iluwatar.spatialpartition.Bubble", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test07()  throws Throwable  {
      Bubble bubble0 = new Bubble(2, 2, 2, 2);
      LinkedList<Bubble> linkedList0 = new LinkedList<Bubble>();
      HashMap<Integer, Bubble> hashMap0 = new HashMap<Integer, Bubble>();
      linkedList0.add(bubble0);
      hashMap0.put((Integer) 2, bubble0);
      Bubble bubble1 = new Bubble(2, 11, 11, 2);
      bubble1.handleCollision(linkedList0, hashMap0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test08()  throws Throwable  {
      Bubble bubble0 = new Bubble(2, 2, 2, 2);
      LinkedList<Bubble> linkedList0 = new LinkedList<Bubble>();
      HashMap<Integer, Bubble> hashMap0 = new HashMap<Integer, Bubble>();
      linkedList0.add(bubble0);
      hashMap0.put((Integer) 2, bubble0);
      bubble0.handleCollision(linkedList0, hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test09()  throws Throwable  {
      Bubble bubble0 = new Bubble(2, 2, 2, 2);
      LinkedList<Bubble> linkedList0 = new LinkedList<Bubble>();
      HashMap<Integer, Bubble> hashMap0 = new HashMap<Integer, Bubble>();
      linkedList0.add(bubble0);
      bubble0.handleCollision(linkedList0, hashMap0);
      assertEquals(2, bubble0.id);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test10()  throws Throwable  {
      Bubble bubble0 = new Bubble(2, 2, 2, 2);
      Bubble bubble1 = new Bubble(2, 11, 11, 2);
      boolean boolean0 = bubble1.touches(bubble0);
      assertFalse(boolean0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test11()  throws Throwable  {
      Bubble bubble0 = new Bubble(81796, 157, 81796, (-749));
      bubble0.coordinateX = (-844);
      LinkedList<Bubble> linkedList0 = new LinkedList<Bubble>();
      Bubble bubble1 = new Bubble(2160, 1, (-839), 7384);
      linkedList0.add(bubble1);
      HashMap<Integer, Bubble> hashMap0 = new HashMap<Integer, Bubble>();
      hashMap0.put((Integer) (-839), bubble1);
      bubble0.handleCollision(linkedList0, hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }
}
