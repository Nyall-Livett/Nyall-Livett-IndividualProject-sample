/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 16 14:20:15 GMT 2024
 */

package com.iluwatar.fanout.fanin;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iluwatar.fanout.fanin.Consumer;
import com.iluwatar.fanout.fanin.FanOutFanIn;
import com.iluwatar.fanout.fanin.SquareNumberRequest;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.CompletionException;
import org.evosuite.runtime.EvoRunnerJUnit5;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.jupiter.api.extension.RegisterExtension;

 
public class FanOutFanIn_ESTest  {


  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test0()  throws Throwable  {
      FanOutFanIn fanOutFanIn0 = new FanOutFanIn();
      LinkedList<SquareNumberRequest> linkedList0 = new LinkedList<SquareNumberRequest>();
      long long0 = 2278L;
      Long long1 = new Long(2278L);
      SquareNumberRequest squareNumberRequest0 = new SquareNumberRequest(long1);
      Consumer consumer0 = new Consumer(long1);
      squareNumberRequest0.delayedSquaring(consumer0);
      Long long2 = new Long(2278L);
      squareNumberRequest0.delayedSquaring(consumer0);
      Consumer consumer1 = new Consumer(long2);
      squareNumberRequest0.delayedSquaring(consumer1);
      squareNumberRequest0.delayedSquaring(consumer1);
      linkedList0.add(squareNumberRequest0);
      Long long3 = new Long(2201L);
      Consumer consumer2 = new Consumer(long3);
      FanOutFanIn.fanOutFanIn(linkedList0, consumer2);
      LinkedList<SquareNumberRequest> linkedList1 = new LinkedList<SquareNumberRequest>();
      Consumer consumer3 = null;
      // Undeclared exception!
      try { 
        FanOutFanIn.fanOutFanIn(linkedList1, (Consumer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test1()  throws Throwable  {
      Long long0 = new Long(1L);
      Consumer consumer0 = new Consumer(long0);
      consumer0.add(long0);
      Long long1 = new Long(1L);
      consumer0.add(long1);
      Long long2 = new Long(1L);
      consumer0.add(long2);
      consumer0.add(long1);
      // Undeclared exception!
      try { 
        FanOutFanIn.fanOutFanIn((List<SquareNumberRequest>) null, consumer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.iluwatar.fanout.fanin.FanOutFanIn", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test2()  throws Throwable  {
      FanOutFanIn fanOutFanIn0 = new FanOutFanIn();
      LinkedList<SquareNumberRequest> linkedList0 = new LinkedList<SquareNumberRequest>();
      Long long0 = new Long((-1L));
      Consumer consumer0 = new Consumer(long0);
      Long long1 = Long.valueOf(0L);
      SquareNumberRequest squareNumberRequest0 = new SquareNumberRequest(long1);
      squareNumberRequest0.delayedSquaring(consumer0);
      squareNumberRequest0.delayedSquaring(consumer0);
      linkedList0.add(squareNumberRequest0);
      consumer0.add(long0);
      FanOutFanIn.fanOutFanIn(linkedList0, consumer0);
      FanOutFanIn.fanOutFanIn(linkedList0, consumer0);
      Long long2 = FanOutFanIn.fanOutFanIn(linkedList0, consumer0);
      Long long3 = new Long((-1L));
      consumer0.add(long3);
      Long long4 = consumer0.add(long3);
      FanOutFanIn.fanOutFanIn(linkedList0, consumer0);
      FanOutFanIn.fanOutFanIn(linkedList0, consumer0);
      FanOutFanIn.fanOutFanIn(linkedList0, consumer0);
      FanOutFanIn.fanOutFanIn(linkedList0, consumer0);
      Consumer consumer1 = new Consumer(long4);
      Long long5 = FanOutFanIn.fanOutFanIn(linkedList0, consumer1);
      assertFalse(long5.equals((Object)long2));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test3()  throws Throwable  {
      FanOutFanIn fanOutFanIn0 = new FanOutFanIn();
      LinkedList<SquareNumberRequest> linkedList0 = new LinkedList<SquareNumberRequest>();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) fanOutFanIn0;
      objectArray0[1] = (Object) linkedList0;
      objectArray0[2] = (Object) linkedList0;
      linkedList0.pollFirst();
      objectArray0[3] = (Object) fanOutFanIn0;
      Long long0 = new Long(0L);
      SquareNumberRequest squareNumberRequest0 = new SquareNumberRequest(long0);
      Long long1 = new Long(0L);
      Consumer consumer0 = new Consumer(long1);
      squareNumberRequest0.delayedSquaring(consumer0);
      linkedList0.add(squareNumberRequest0);
      objectArray0[4] = (Object) linkedList0;
      linkedList0.toArray(objectArray0);
      Long long2 = new Long(0L);
      Consumer consumer1 = new Consumer(long2);
      FanOutFanIn.fanOutFanIn(linkedList0, consumer1);
      FanOutFanIn.fanOutFanIn(linkedList0, consumer1);
      FanOutFanIn.fanOutFanIn(linkedList0, consumer1);
      FanOutFanIn.fanOutFanIn(linkedList0, consumer1);
      FanOutFanIn.fanOutFanIn(linkedList0, consumer1);
      FanOutFanIn.fanOutFanIn(linkedList0, consumer1);
      // Undeclared exception!
      try { 
        FanOutFanIn.fanOutFanIn(linkedList0, (Consumer) null);
        fail("Expecting exception: CompletionException");
      
      } catch(CompletionException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("java.util.concurrent.CompletableFuture", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test4()  throws Throwable  {
      LinkedList<SquareNumberRequest> linkedList0 = new LinkedList<SquareNumberRequest>();
      Long long0 = new Long(4286L);
      SquareNumberRequest squareNumberRequest0 = new SquareNumberRequest(long0);
      linkedList0.add(squareNumberRequest0);
      Long long1 = new Long(3575L);
      SquareNumberRequest squareNumberRequest1 = new SquareNumberRequest(long1);
      Consumer consumer0 = new Consumer(long0);
      squareNumberRequest1.delayedSquaring(consumer0);
      Long long2 = new Long((-1359L));
      Consumer consumer1 = new Consumer(long2);
      Long long3 = new Long(89L);
      consumer0.add(long3);
      consumer1.add(long2);
      consumer1.add(long0);
      squareNumberRequest1.delayedSquaring(consumer1);
      linkedList0.push(squareNumberRequest1);
      Consumer consumer2 = null;
      // Undeclared exception!
      try { 
        FanOutFanIn.fanOutFanIn(linkedList0, (Consumer) null);
        fail("Expecting exception: CompletionException");
      
      } catch(CompletionException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("java.util.concurrent.CompletableFuture", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test5()  throws Throwable  {
      FanOutFanIn fanOutFanIn0 = new FanOutFanIn();
      Long long0 = new Long((-580L));
      SquareNumberRequest squareNumberRequest0 = new SquareNumberRequest(long0);
      List<SquareNumberRequest> list0 = List.of(squareNumberRequest0, squareNumberRequest0, squareNumberRequest0, squareNumberRequest0, squareNumberRequest0, squareNumberRequest0);
      // Undeclared exception!
      try { 
        FanOutFanIn.fanOutFanIn(list0, (Consumer) null);
        fail("Expecting exception: CompletionException");
      
      } catch(CompletionException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("java.util.concurrent.CompletableFuture", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test6()  throws Throwable  {
      LinkedList<SquareNumberRequest> linkedList0 = new LinkedList<SquareNumberRequest>();
      long long0 = 0L;
      Long long1 = Long.getLong("%n0}", 0L);
      Consumer consumer0 = new Consumer(long1);
      // Undeclared exception!
      try { 
        FanOutFanIn.fanOutFanIn(linkedList0, consumer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test7()  throws Throwable  {
      LinkedList<SquareNumberRequest> linkedList0 = new LinkedList<SquareNumberRequest>();
      Long long0 = new Long(0L);
      Consumer consumer0 = new Consumer(long0);
      // Undeclared exception!
      try { 
        FanOutFanIn.fanOutFanIn(linkedList0, consumer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test8()  throws Throwable  {
      FanOutFanIn fanOutFanIn0 = new FanOutFanIn();
      LinkedList<SquareNumberRequest> linkedList0 = new LinkedList<SquareNumberRequest>();
      Consumer consumer0 = null;
      try {
        consumer0 = new Consumer((Long) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.iluwatar.fanout.fanin.Consumer", e);
      }
  }
}
