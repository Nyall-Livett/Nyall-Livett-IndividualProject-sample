/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 16 16:24:30 GMT 2024
 */

package com.iluwatar.component;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iluwatar.component.GameObject;
import com.iluwatar.component.component.graphiccomponent.GraphicComponent;
import com.iluwatar.component.component.graphiccomponent.ObjectGraphicComponent;
import com.iluwatar.component.component.inputcomponent.DemoInputComponent;
import com.iluwatar.component.component.inputcomponent.InputComponent;
import com.iluwatar.component.component.inputcomponent.PlayerInputComponent;
import com.iluwatar.component.component.physiccomponent.ObjectPhysicComponent;
import com.iluwatar.component.component.physiccomponent.PhysicComponent;
import org.evosuite.runtime.EvoRunnerJUnit5;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.jupiter.api.extension.RegisterExtension;

@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class GameObject_ESTest extends GameObject_ESTest_scaffolding {
@RegisterExtension
  static EvoRunnerJUnit5 runner = new EvoRunnerJUnit5(GameObject_ESTest.class);

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test00()  throws Throwable  {
      GameObject gameObject0 = GameObject.createNpc();
      gameObject0.demoUpdate();
      int int0 = gameObject0.getVelocity();
      assertEquals(2, int0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test01()  throws Throwable  {
      GameObject gameObject0 = GameObject.createPlayer();
      gameObject0.updateVelocity((-315));
      int int0 = gameObject0.getVelocity();
      assertEquals((-315), int0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test02()  throws Throwable  {
      GameObject gameObject0 = GameObject.createPlayer();
      gameObject0.getPhysicComponent();
      assertEquals(0, gameObject0.getCoordinate());
      assertEquals(0, gameObject0.getVelocity());
      assertEquals("player", gameObject0.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test03()  throws Throwable  {
      DemoInputComponent demoInputComponent0 = new DemoInputComponent();
      ObjectPhysicComponent objectPhysicComponent0 = new ObjectPhysicComponent();
      ObjectGraphicComponent objectGraphicComponent0 = new ObjectGraphicComponent();
      GameObject gameObject0 = new GameObject(demoInputComponent0, objectPhysicComponent0, objectGraphicComponent0, (String) null);
      gameObject0.getName();
      assertEquals(0, gameObject0.getCoordinate());
      assertEquals(0, gameObject0.getVelocity());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test04()  throws Throwable  {
      PlayerInputComponent playerInputComponent0 = new PlayerInputComponent();
      ObjectPhysicComponent objectPhysicComponent0 = new ObjectPhysicComponent();
      ObjectGraphicComponent objectGraphicComponent0 = new ObjectGraphicComponent();
      GameObject gameObject0 = new GameObject(playerInputComponent0, objectPhysicComponent0, objectGraphicComponent0, "");
      gameObject0.getName();
      assertEquals(0, gameObject0.getCoordinate());
      assertEquals(0, gameObject0.getVelocity());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test05()  throws Throwable  {
      GameObject gameObject0 = GameObject.createPlayer();
      gameObject0.getInputComponent();
      assertEquals(0, gameObject0.getVelocity());
      assertEquals("player", gameObject0.getName());
      assertEquals(0, gameObject0.getCoordinate());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test06()  throws Throwable  {
      DemoInputComponent demoInputComponent0 = new DemoInputComponent();
      ObjectPhysicComponent objectPhysicComponent0 = new ObjectPhysicComponent();
      GameObject gameObject0 = new GameObject(demoInputComponent0, objectPhysicComponent0, (GraphicComponent) null, "o|5g?%,51 $]");
      gameObject0.getGraphicComponent();
      assertEquals(0, gameObject0.getCoordinate());
      assertEquals(0, gameObject0.getVelocity());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test07()  throws Throwable  {
      DemoInputComponent demoInputComponent0 = new DemoInputComponent();
      ObjectPhysicComponent objectPhysicComponent0 = new ObjectPhysicComponent();
      GameObject gameObject0 = new GameObject(demoInputComponent0, objectPhysicComponent0, (GraphicComponent) null, "o|5g?%,51 $]");
      // Undeclared exception!
      try { 
        gameObject0.demoUpdate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.iluwatar.component.GameObject", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test08()  throws Throwable  {
      GameObject gameObject0 = GameObject.createPlayer();
      gameObject0.updateCoordinate();
      assertEquals(0, gameObject0.getCoordinate());
      assertEquals("player", gameObject0.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test09()  throws Throwable  {
      GameObject gameObject0 = GameObject.createPlayer();
      gameObject0.updateVelocity((-315));
      gameObject0.updateCoordinate();
      int int0 = gameObject0.getCoordinate();
      assertEquals((-315), gameObject0.getVelocity());
      assertEquals((-315), int0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test10()  throws Throwable  {
      GameObject gameObject0 = GameObject.createPlayer();
      int int0 = gameObject0.getVelocity();
      assertEquals(0, gameObject0.getCoordinate());
      assertEquals(0, int0);
      assertEquals("player", gameObject0.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test11()  throws Throwable  {
      GameObject gameObject0 = GameObject.createPlayer();
      String string0 = gameObject0.getName();
      assertEquals(0, gameObject0.getCoordinate());
      assertEquals(0, gameObject0.getVelocity());
      assertEquals("player", string0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test12()  throws Throwable  {
      DemoInputComponent demoInputComponent0 = new DemoInputComponent();
      ObjectGraphicComponent objectGraphicComponent0 = new ObjectGraphicComponent();
      GameObject gameObject0 = new GameObject(demoInputComponent0, (PhysicComponent) null, objectGraphicComponent0, "@ZtR7By'9]Z0Tda");
      gameObject0.getPhysicComponent();
      assertEquals(0, gameObject0.getVelocity());
      assertEquals(0, gameObject0.getCoordinate());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test13()  throws Throwable  {
      GameObject gameObject0 = GameObject.createNpc();
      gameObject0.update(2773);
      int int0 = gameObject0.getCoordinate();
      assertEquals(2, gameObject0.getVelocity());
      assertEquals(2, int0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test14()  throws Throwable  {
      GameObject gameObject0 = GameObject.createPlayer();
      gameObject0.getGraphicComponent();
      assertEquals(0, gameObject0.getVelocity());
      assertEquals(0, gameObject0.getCoordinate());
      assertEquals("player", gameObject0.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test15()  throws Throwable  {
      ObjectPhysicComponent objectPhysicComponent0 = new ObjectPhysicComponent();
      ObjectGraphicComponent objectGraphicComponent0 = new ObjectGraphicComponent();
      GameObject gameObject0 = new GameObject((InputComponent) null, objectPhysicComponent0, objectGraphicComponent0, "3pa:XF]/!RS4z,f1U?L");
      gameObject0.getInputComponent();
      assertEquals(0, gameObject0.getCoordinate());
      assertEquals(0, gameObject0.getVelocity());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test16()  throws Throwable  {
      ObjectPhysicComponent objectPhysicComponent0 = new ObjectPhysicComponent();
      ObjectGraphicComponent objectGraphicComponent0 = new ObjectGraphicComponent();
      GameObject gameObject0 = new GameObject((InputComponent) null, objectPhysicComponent0, objectGraphicComponent0, "3pa:XF]/!RS4z,f1U?L");
      // Undeclared exception!
      try { 
        gameObject0.update(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.iluwatar.component.GameObject", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test17()  throws Throwable  {
      GameObject gameObject0 = GameObject.createPlayer();
      int int0 = gameObject0.getCoordinate();
      assertEquals(0, gameObject0.getVelocity());
      assertEquals("player", gameObject0.getName());
      assertEquals(0, int0);
  }
}
