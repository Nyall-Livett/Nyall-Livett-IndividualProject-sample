/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 16 14:02:03 GMT 2024
 */

package com.iluwatar.property;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iluwatar.property.Character;
import com.iluwatar.property.Prototype;
import com.iluwatar.property.Stats;
import org.evosuite.runtime.EvoRunnerJUnit5;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.jupiter.api.extension.RegisterExtension;

@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Character_ESTest extends Character_ESTest_scaffolding {
@RegisterExtension
  static EvoRunnerJUnit5 runner = new EvoRunnerJUnit5(Character_ESTest.class);

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test00()  throws Throwable  {
      Character.Type character_Type0 = Character.Type.MAGE;
      Character character0 = new Character();
      Character character1 = new Character(character_Type0, character0);
      Character.Type character_Type1 = character1.type();
      assertSame(character_Type0, character_Type1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test01()  throws Throwable  {
      Character character0 = new Character();
      Character character1 = new Character("STRENGTH", character0);
      String string0 = character1.name();
      assertEquals("STRENGTH", string0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test02()  throws Throwable  {
      Character.Type character_Type0 = Character.Type.WARRIOR;
      Character character0 = new Character(character_Type0, (Prototype) null);
      Character character1 = new Character("", character0);
      String string0 = character1.name();
      assertEquals("", string0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test03()  throws Throwable  {
      Character character0 = new Character();
      Stats stats0 = Stats.AGILITY;
      Integer integer0 = new Integer(0);
      character0.set(stats0, integer0);
      Integer integer1 = character0.get(stats0);
      assertEquals(0, (int)integer1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test04()  throws Throwable  {
      Character character0 = new Character();
      Stats stats0 = Stats.INTELLECT;
      Integer integer0 = character0.get(stats0);
      assertNull(integer0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test05()  throws Throwable  {
      Character character0 = new Character();
      Stats stats0 = Stats.RAGE;
      Integer integer0 = new Integer((-647));
      character0.set(stats0, integer0);
      Integer integer1 = character0.get(stats0);
      assertEquals((-647), (int)integer1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test06()  throws Throwable  {
      Character.Type character_Type0 = Character.Type.WARRIOR;
      Character character0 = new Character(character_Type0, (Prototype) null);
      // Undeclared exception!
      try { 
        character0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.iluwatar.property.Character", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test07()  throws Throwable  {
      Character character0 = null;
      try {
        character0 = new Character((String) null, (Character) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.iluwatar.property.Character", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test08()  throws Throwable  {
      Character.Type character_Type0 = Character.Type.MAGE;
      Character character0 = new Character(character_Type0, (Prototype) null);
      Stats stats0 = Stats.ENERGY;
      // Undeclared exception!
      try { 
        character0.get(stats0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.iluwatar.property.Character", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test09()  throws Throwable  {
      Character character0 = new Character();
      Stats stats0 = Stats.AGILITY;
      Integer integer0 = new Integer(871);
      character0.set(stats0, integer0);
      Integer integer1 = character0.get(stats0);
      assertEquals(871, (int)integer1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test10()  throws Throwable  {
      Character character0 = new Character();
      Stats stats0 = Stats.AGILITY;
      Integer integer0 = new Integer(0);
      character0.set(stats0, integer0);
      String string0 = character0.toString();
      assertEquals("Stats:\n - AGILITY:0\n", string0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test11()  throws Throwable  {
      Character character0 = new Character();
      Stats stats0 = Stats.AGILITY;
      Integer integer0 = new Integer(0);
      character0.set(stats0, integer0);
      boolean boolean0 = character0.has(stats0);
      assertTrue(boolean0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test12()  throws Throwable  {
      Character character0 = new Character();
      Stats stats0 = Stats.AGILITY;
      boolean boolean0 = character0.has(stats0);
      assertFalse(boolean0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test13()  throws Throwable  {
      Character character0 = new Character();
      String string0 = character0.name();
      assertNull(string0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test14()  throws Throwable  {
      Character character0 = new Character();
      character0.type();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test15()  throws Throwable  {
      Character character0 = new Character();
      Stats stats0 = Stats.RAGE;
      character0.remove(stats0);
      assertNull(character0.name());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test16()  throws Throwable  {
      Character character0 = new Character();
      Character character1 = new Character("~+zq-{ RMseZ2y6*~tm", character0);
      String string0 = character1.toString();
      assertEquals("Player: ~+zq-{ RMseZ2y6*~tm\nStats:\n", string0);
  }
}
