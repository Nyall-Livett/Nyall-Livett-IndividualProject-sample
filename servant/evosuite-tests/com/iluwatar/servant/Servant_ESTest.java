/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 16 15:48:00 GMT 2024
 */

package com.iluwatar.servant;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iluwatar.servant.King;
import com.iluwatar.servant.Queen;
import com.iluwatar.servant.Royalty;
import com.iluwatar.servant.Servant;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunnerJUnit5;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.jupiter.api.extension.RegisterExtension;

@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Servant_ESTest extends Servant_ESTest_scaffolding {
@RegisterExtension
  static EvoRunnerJUnit5 runner = new EvoRunnerJUnit5(Servant_ESTest.class);

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test0()  throws Throwable  {
      Servant servant0 = new Servant(",{E.Yu");
      LinkedList<Royalty> linkedList0 = new LinkedList<Royalty>();
      Queen queen0 = new Queen();
      boolean boolean0 = linkedList0.add((Royalty) queen0);
      boolean boolean1 = servant0.checkIfYouWillBeHanged(linkedList0);
      assertFalse(boolean1 == boolean0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test1()  throws Throwable  {
      Servant servant0 = new Servant("8q^:IMf\"R");
      // Undeclared exception!
      try { 
        servant0.giveWine((Royalty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.iluwatar.servant.Servant", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test2()  throws Throwable  {
      Servant servant0 = new Servant("com.iluwatar.servant.Servant");
      // Undeclared exception!
      try { 
        servant0.giveCompliments((Royalty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.iluwatar.servant.Servant", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test3()  throws Throwable  {
      Servant servant0 = new Servant("R");
      // Undeclared exception!
      try { 
        servant0.feed((Royalty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.iluwatar.servant.Servant", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test4()  throws Throwable  {
      Servant servant0 = new Servant("*NLE+(");
      // Undeclared exception!
      try { 
        servant0.checkIfYouWillBeHanged((List<Royalty>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.iluwatar.servant.Servant", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test5()  throws Throwable  {
      Servant servant0 = new Servant(",{E.Yu");
      King king0 = new King();
      servant0.feed(king0);
      assertFalse(king0.getMood());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test6()  throws Throwable  {
      Servant servant0 = new Servant("");
      King king0 = new King();
      servant0.giveCompliments(king0);
      assertFalse(king0.getMood());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test7()  throws Throwable  {
      Servant servant0 = new Servant(",{E.Yu");
      LinkedList<Royalty> linkedList0 = new LinkedList<Royalty>();
      boolean boolean0 = servant0.checkIfYouWillBeHanged(linkedList0);
      assertTrue(boolean0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test8()  throws Throwable  {
      Servant servant0 = new Servant("");
      King king0 = new King();
      servant0.giveWine(king0);
      assertFalse(king0.getMood());
  }
}
