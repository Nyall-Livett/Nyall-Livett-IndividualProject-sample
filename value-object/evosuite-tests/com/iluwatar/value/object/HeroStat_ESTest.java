/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 16 16:50:21 GMT 2024
 */

package com.iluwatar.value.object;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import com.iluwatar.value.object.HeroStat;
import org.evosuite.runtime.EvoRunnerJUnit5;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.jupiter.api.extension.RegisterExtension;

@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class HeroStat_ESTest extends HeroStat_ESTest_scaffolding {
@RegisterExtension
  static EvoRunnerJUnit5 runner = new EvoRunnerJUnit5(HeroStat_ESTest.class);

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test00()  throws Throwable  {
      HeroStat heroStat0 = HeroStat.valueOf(1621, (-2442), 424);
      heroStat0.hashCode();
      assertEquals("HeroStat(strength=1621, intelligence=-2442, luck=424)", heroStat0.toString());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test01()  throws Throwable  {
      HeroStat heroStat0 = HeroStat.valueOf(1488, 56, 0);
      heroStat0.hashCode();
      assertEquals("HeroStat(strength=1488, intelligence=56, luck=0)", heroStat0.toString());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test02()  throws Throwable  {
      HeroStat heroStat0 = HeroStat.valueOf(1, 1, 1);
      HeroStat heroStat1 = HeroStat.valueOf(1, 1, 0);
      boolean boolean0 = heroStat1.equals(heroStat0);
      assertFalse(boolean0);
      assertFalse(heroStat0.equals((Object)heroStat1));
      assertEquals("HeroStat(strength=1, intelligence=1, luck=0)", heroStat1.toString());
      assertEquals(1, heroStat0.getLuck());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test03()  throws Throwable  {
      HeroStat heroStat0 = HeroStat.valueOf(0, 938, 0);
      HeroStat heroStat1 = HeroStat.valueOf(0, (-569), 0);
      boolean boolean0 = heroStat1.equals(heroStat0);
      assertEquals("HeroStat(strength=0, intelligence=-569, luck=0)", heroStat1.toString());
      assertFalse(boolean0);
      assertFalse(heroStat0.equals((Object)heroStat1));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test04()  throws Throwable  {
      HeroStat heroStat0 = HeroStat.valueOf(0, 0, 0);
      HeroStat heroStat1 = HeroStat.valueOf((-1293), 0, (-1293));
      boolean boolean0 = heroStat1.equals(heroStat0);
      assertEquals("HeroStat(strength=-1293, intelligence=0, luck=-1293)", heroStat1.toString());
      assertFalse(boolean0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test05()  throws Throwable  {
      HeroStat heroStat0 = HeroStat.valueOf(1488, 56, 0);
      int int0 = heroStat0.getStrength();
      assertEquals("HeroStat(strength=1488, intelligence=56, luck=0)", heroStat0.toString());
      assertEquals(1488, int0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test06()  throws Throwable  {
      HeroStat heroStat0 = HeroStat.valueOf((-5332), (-5332), (-5332));
      int int0 = heroStat0.getStrength();
      assertEquals("HeroStat(strength=-5332, intelligence=-5332, luck=-5332)", heroStat0.toString());
      assertEquals((-5332), int0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test07()  throws Throwable  {
      HeroStat heroStat0 = HeroStat.valueOf(0, 1845, 1013);
      int int0 = heroStat0.getLuck();
      assertEquals("HeroStat(strength=0, intelligence=1845, luck=1013)", heroStat0.toString());
      assertEquals(1013, int0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test08()  throws Throwable  {
      HeroStat heroStat0 = HeroStat.valueOf(3842, (-2442), (-2292));
      int int0 = heroStat0.getLuck();
      assertEquals("HeroStat(strength=3842, intelligence=-2442, luck=-2292)", heroStat0.toString());
      assertEquals((-2292), int0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test09()  throws Throwable  {
      HeroStat heroStat0 = HeroStat.valueOf(0, 0, 2115);
      int int0 = heroStat0.getIntelligence();
      assertEquals("HeroStat(strength=0, intelligence=0, luck=2115)", heroStat0.toString());
      assertEquals(0, int0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test10()  throws Throwable  {
      HeroStat heroStat0 = HeroStat.valueOf(0, (-569), 0);
      int int0 = heroStat0.getIntelligence();
      assertEquals("HeroStat(strength=0, intelligence=-569, luck=0)", heroStat0.toString());
      assertEquals((-569), int0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test11()  throws Throwable  {
      HeroStat heroStat0 = HeroStat.valueOf(0, 938, 0);
      int int0 = heroStat0.getStrength();
      assertEquals("HeroStat(strength=0, intelligence=938, luck=0)", heroStat0.toString());
      assertEquals(0, int0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test12()  throws Throwable  {
      HeroStat heroStat0 = HeroStat.valueOf(0, 938, 0);
      int int0 = heroStat0.getLuck();
      assertEquals("HeroStat(strength=0, intelligence=938, luck=0)", heroStat0.toString());
      assertEquals(0, int0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test13()  throws Throwable  {
      HeroStat heroStat0 = HeroStat.valueOf(0, 938, 0);
      int int0 = heroStat0.getIntelligence();
      assertEquals("HeroStat(strength=0, intelligence=938, luck=0)", heroStat0.toString());
      assertEquals(938, int0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test14()  throws Throwable  {
      HeroStat heroStat0 = HeroStat.valueOf(1, 1, 1);
      HeroStat heroStat1 = HeroStat.valueOf(1, 1, 1);
      boolean boolean0 = heroStat0.equals(heroStat1);
      assertEquals("HeroStat(strength=1, intelligence=1, luck=1)", heroStat1.toString());
      assertTrue(boolean0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test15()  throws Throwable  {
      HeroStat heroStat0 = HeroStat.valueOf(0, 938, 0);
      HeroStat heroStat1 = HeroStat.valueOf(0, (-569), 0);
      boolean boolean0 = heroStat0.equals(heroStat1);
      assertEquals("HeroStat(strength=0, intelligence=-569, luck=0)", heroStat1.toString());
      assertFalse(heroStat1.equals((Object)heroStat0));
      assertFalse(boolean0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test16()  throws Throwable  {
      HeroStat heroStat0 = HeroStat.valueOf(1, 1, 1);
      HeroStat heroStat1 = HeroStat.valueOf(1, 1, 0);
      boolean boolean0 = heroStat0.equals(heroStat1);
      assertEquals("HeroStat(strength=1, intelligence=1, luck=0)", heroStat1.toString());
      assertFalse(heroStat1.equals((Object)heroStat0));
      assertFalse(boolean0);
      assertEquals("HeroStat(strength=1, intelligence=1, luck=1)", heroStat0.toString());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test17()  throws Throwable  {
      HeroStat heroStat0 = HeroStat.valueOf(0, 938, 0);
      boolean boolean0 = heroStat0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals("HeroStat(strength=0, intelligence=938, luck=0)", heroStat0.toString());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test18()  throws Throwable  {
      HeroStat heroStat0 = HeroStat.valueOf(1, 1, 1);
      boolean boolean0 = heroStat0.equals(heroStat0);
      assertTrue(boolean0);
      assertEquals("HeroStat(strength=1, intelligence=1, luck=1)", heroStat0.toString());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test19()  throws Throwable  {
      HeroStat heroStat0 = HeroStat.valueOf(1, 1, 1);
      HeroStat heroStat1 = HeroStat.valueOf((-2), 1, 1);
      boolean boolean0 = heroStat0.equals(heroStat1);
      assertEquals("HeroStat(strength=-2, intelligence=1, luck=1)", heroStat1.toString());
      assertFalse(heroStat1.equals((Object)heroStat0));
      assertFalse(boolean0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test20()  throws Throwable  {
      HeroStat heroStat0 = HeroStat.valueOf(2753, 2753, 2753);
      String string0 = heroStat0.toString();
      assertEquals("HeroStat(strength=2753, intelligence=2753, luck=2753)", string0);
  }
}
