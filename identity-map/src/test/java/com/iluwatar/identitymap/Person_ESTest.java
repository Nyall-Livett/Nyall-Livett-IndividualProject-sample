/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 16 13:55:32 GMT 2024
 */

package com.iluwatar.identitymap;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import com.iluwatar.identitymap.Person;
import org.evosuite.runtime.EvoRunnerJUnit5;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.jupiter.api.extension.RegisterExtension;

 
public class Person_ESTest  {


  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test00()  throws Throwable  {
      Person person0 = new Person(2596, "", 2596);
      person0.setPersonNationalId((-563));
      Person person1 = new Person(0, "", 0);
      boolean boolean0 = person0.equals(person1);
      assertEquals("Person ID is : -563 ; Person Name is :  ; Phone Number is :2596", person0.toString());
      assertFalse(boolean0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test01()  throws Throwable  {
      Person person0 = new Person(0, "", 0);
      person0.getPhoneNum();
      assertEquals("Person ID is : 0 ; Person Name is :  ; Phone Number is :0", person0.toString());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test02()  throws Throwable  {
      Person person0 = new Person((-2852), "", (-2852));
      long long0 = person0.getPhoneNum();
      assertEquals((-2852L), long0);
      assertEquals("Person ID is : -2852 ; Person Name is :  ; Phone Number is :-2852", person0.toString());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test03()  throws Throwable  {
      Person person0 = new Person(2596, "", 2596);
      person0.setPersonNationalId(0);
      int int0 = person0.getPersonNationalId();
      assertEquals(0, int0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test04()  throws Throwable  {
      Person person0 = new Person((-298), "", (-298));
      int int0 = person0.getPersonNationalId();
      assertEquals((-298), int0);
      assertEquals((-298L), person0.getPhoneNum());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test05()  throws Throwable  {
      Person person0 = new Person(0, "`N#[EPb Xo", 0);
      person0.setName((String) null);
      person0.getName();
      assertEquals("Person ID is : 0 ; Person Name is : null ; Phone Number is :0", person0.toString());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test06()  throws Throwable  {
      Person person0 = new Person(2596, "", 2596);
      person0.setName("gzsJ#0(-XxV#N%X[m(a");
      person0.getName();
      assertEquals("Person ID is : 2596 ; Person Name is : gzsJ#0(-XxV#N%X[m(a ; Phone Number is :2596", person0.toString());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test07()  throws Throwable  {
      Person person0 = new Person(2596, "", 2596);
      int int0 = person0.getPersonNationalId();
      assertEquals(2596, int0);
      assertEquals(2596L, person0.getPhoneNum());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test08()  throws Throwable  {
      Person person0 = new Person(2596, "", 2596);
      Person person1 = new Person(0, "", 0);
      boolean boolean0 = person0.equals(person1);
      assertEquals(2596L, person0.getPhoneNum());
      assertFalse(person1.equals((Object)person0));
      assertEquals(2596, person0.getPersonNationalId());
      assertFalse(boolean0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test09()  throws Throwable  {
      Person person0 = new Person((-1), "", (-1));
      boolean boolean0 = person0.equals("");
      assertFalse(boolean0);
      assertEquals("Person ID is : -1 ; Person Name is :  ; Phone Number is :-1", person0.toString());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test10()  throws Throwable  {
      Person person0 = new Person((-1), "", (-1));
      boolean boolean0 = person0.equals(person0);
      assertTrue(boolean0);
      assertEquals("Person ID is : -1 ; Person Name is :  ; Phone Number is :-1", person0.toString());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test11()  throws Throwable  {
      Person person0 = new Person(2596, "", 2596);
      long long0 = person0.getPhoneNum();
      assertEquals("Person ID is : 2596 ; Person Name is :  ; Phone Number is :2596", person0.toString());
      assertEquals(2596L, long0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test12()  throws Throwable  {
      Person person0 = new Person(2596, "", 2596);
      person0.hashCode();
      assertEquals("Person ID is : 2596 ; Person Name is :  ; Phone Number is :2596", person0.toString());
      assertEquals(2596, person0.getPersonNationalId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test13()  throws Throwable  {
      Person person0 = new Person((-1), "", (-1));
      person0.getName();
      assertEquals("Person ID is : -1 ; Person Name is :  ; Phone Number is :-1", person0.toString());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test14()  throws Throwable  {
      Person person0 = new Person((-1), "", (-1));
      person0.setPhoneNum((-1862));
      assertEquals((-1862L), person0.getPhoneNum());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test15()  throws Throwable  {
      Person person0 = new Person((-1), "", (-1));
      String string0 = person0.toString();
      assertEquals("Person ID is : -1 ; Person Name is :  ; Phone Number is :-1", string0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test16()  throws Throwable  {
      Person person0 = new Person((-33), "d3ER{d(s4ch", (-33));
      Person person1 = new Person((-33), "d3ER{d(s4ch", (-33));
      boolean boolean0 = person0.equals(person1);
      assertTrue(boolean0);
      assertEquals((-33L), person1.getPhoneNum());
      assertEquals((-33), person1.getPersonNationalId());
  }
}
