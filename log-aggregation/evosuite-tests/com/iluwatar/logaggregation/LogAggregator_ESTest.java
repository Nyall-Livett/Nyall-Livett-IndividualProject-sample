/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 16 16:00:02 GMT 2024
 */

package com.iluwatar.logaggregation;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iluwatar.logaggregation.CentralLogStore;
import com.iluwatar.logaggregation.LogAggregator;
import com.iluwatar.logaggregation.LogEntry;
import com.iluwatar.logaggregation.LogLevel;
import java.time.Clock;
import java.time.DateTimeException;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.Month;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.temporal.ChronoUnit;
import java.time.temporal.TemporalUnit;
import org.evosuite.runtime.EvoRunnerJUnit5;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.junit.jupiter.api.extension.RegisterExtension;

@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class LogAggregator_ESTest extends LogAggregator_ESTest_scaffolding {
@RegisterExtension
  static EvoRunnerJUnit5 runner = new EvoRunnerJUnit5(LogAggregator_ESTest.class);

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test0()  throws Throwable  {
      CentralLogStore centralLogStore0 = new CentralLogStore();
      assertNotNull(centralLogStore0);
      
      LogLevel logLevel0 = LogLevel.DEBUG;
      centralLogStore0.displayLogs();
      LogAggregator logAggregator0 = new LogAggregator(centralLogStore0, logLevel0);
      assertNotNull(logAggregator0);
      
      LogLevel logLevel1 = LogLevel.ERROR;
      Instant instant0 = MockInstant.ofEpochMilli(0L);
      assertNotNull(instant0);
      
      ChronoUnit chronoUnit0 = ChronoUnit.SECONDS;
      assertEquals(ChronoUnit.SECONDS, chronoUnit0);
      
      Instant instant1 = MockInstant.minus(instant0, 0L, (TemporalUnit) chronoUnit0);
      assertNotNull(instant1);
      assertSame(instant0, instant1);
      assertSame(instant1, instant0);
      
      ZoneId zoneId0 = ZoneId.systemDefault();
      assertNotNull(zoneId0);
      
      Clock clock0 = MockClock.fixed(instant1, zoneId0);
      assertNotNull(clock0);
      assertSame(instant0, instant1);
      assertSame(instant1, instant0);
      
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      assertNotNull(localDateTime0);
      assertSame(instant0, instant1);
      assertSame(instant1, instant0);
      
      LogEntry logEntry0 = new LogEntry((String) null, logLevel1, "", localDateTime0);
      assertEquals("LogEntry(serviceName=null, level=ERROR, message=, timestamp=1970-01-01T00:00)", logEntry0.toString());
      assertEquals(LogLevel.ERROR, logEntry0.getLevel());
      assertNull(logEntry0.getServiceName());
      assertEquals("", logEntry0.getMessage());
      assertNotNull(logEntry0);
      assertFalse(logLevel1.equals((Object)logLevel0));
      
      centralLogStore0.storeLog(logEntry0);
      assertEquals("LogEntry(serviceName=null, level=ERROR, message=, timestamp=1970-01-01T00:00)", logEntry0.toString());
      assertEquals(LogLevel.ERROR, logEntry0.getLevel());
      assertNull(logEntry0.getServiceName());
      assertEquals("", logEntry0.getMessage());
      assertNotSame(logLevel1, logLevel0);
      assertSame(instant0, instant1);
      assertSame(instant1, instant0);
      assertFalse(logLevel1.equals((Object)logLevel0));
      
      logAggregator0.stop();
      assertNotSame(logLevel0, logLevel1);
      assertFalse(logLevel0.equals((Object)logLevel1));
      
      logAggregator0.stop();
      assertNotSame(logLevel0, logLevel1);
      assertFalse(logLevel0.equals((Object)logLevel1));
      
      logEntry0.setMessage("");
      assertEquals("LogEntry(serviceName=null, level=ERROR, message=, timestamp=1970-01-01T00:00)", logEntry0.toString());
      assertEquals(LogLevel.ERROR, logEntry0.getLevel());
      assertNull(logEntry0.getServiceName());
      assertEquals("", logEntry0.getMessage());
      assertNotSame(logLevel1, logLevel0);
      assertSame(instant0, instant1);
      assertSame(instant1, instant0);
      assertFalse(logLevel1.equals((Object)logLevel0));
      
      logAggregator0.collectLog(logEntry0);
      assertEquals("LogEntry(serviceName=null, level=ERROR, message=, timestamp=1970-01-01T00:00)", logEntry0.toString());
      assertEquals(LogLevel.ERROR, logEntry0.getLevel());
      assertNull(logEntry0.getServiceName());
      assertEquals("", logEntry0.getMessage());
      assertNotSame(logLevel0, logLevel1);
      assertNotSame(logLevel1, logLevel0);
      assertSame(instant0, instant1);
      assertSame(instant1, instant0);
      assertFalse(logLevel0.equals((Object)logLevel1));
      assertFalse(logLevel1.equals((Object)logLevel0));
      
      String string0 = zoneId0.toString();
      assertNotNull(string0);
      assertEquals("GMT", string0);
      
      logAggregator0.stop();
      assertNotSame(logLevel0, logLevel1);
      assertFalse(logLevel0.equals((Object)logLevel1));
      
      logAggregator0.collectLog(logEntry0);
      assertEquals("LogEntry(serviceName=null, level=ERROR, message=, timestamp=1970-01-01T00:00)", logEntry0.toString());
      assertEquals(LogLevel.ERROR, logEntry0.getLevel());
      assertNull(logEntry0.getServiceName());
      assertEquals("", logEntry0.getMessage());
      assertNotSame(logLevel0, logLevel1);
      assertNotSame(logLevel1, logLevel0);
      assertSame(instant0, instant1);
      assertSame(instant1, instant0);
      assertFalse(logLevel0.equals((Object)logLevel1));
      assertFalse(logLevel1.equals((Object)logLevel0));
      
      logAggregator0.stop();
      assertNotSame(logLevel0, logLevel1);
      assertFalse(logLevel0.equals((Object)logLevel1));
      
      logAggregator0.collectLog(logEntry0);
      assertEquals("LogEntry(serviceName=null, level=ERROR, message=, timestamp=1970-01-01T00:00)", logEntry0.toString());
      assertEquals(LogLevel.ERROR, logEntry0.getLevel());
      assertNull(logEntry0.getServiceName());
      assertEquals("", logEntry0.getMessage());
      assertNotSame(logLevel0, logLevel1);
      assertNotSame(logLevel1, logLevel0);
      assertSame(instant0, instant1);
      assertSame(instant1, instant0);
      assertFalse(logLevel0.equals((Object)logLevel1));
      assertFalse(logLevel1.equals((Object)logLevel0));
      
      logAggregator0.collectLog(logEntry0);
      assertEquals("LogEntry(serviceName=null, level=ERROR, message=, timestamp=1970-01-01T00:00)", logEntry0.toString());
      assertEquals(LogLevel.ERROR, logEntry0.getLevel());
      assertNull(logEntry0.getServiceName());
      assertEquals("", logEntry0.getMessage());
      assertNotSame(logLevel0, logLevel1);
      assertNotSame(logLevel1, logLevel0);
      assertSame(instant0, instant1);
      assertSame(instant1, instant0);
      assertFalse(logLevel0.equals((Object)logLevel1));
      assertFalse(logLevel1.equals((Object)logLevel0));
      
      logAggregator0.stop();
      assertNotSame(logLevel0, logLevel1);
      assertFalse(logLevel0.equals((Object)logLevel1));
      
      logAggregator0.collectLog(logEntry0);
      assertEquals("LogEntry(serviceName=null, level=ERROR, message=, timestamp=1970-01-01T00:00)", logEntry0.toString());
      assertEquals(LogLevel.ERROR, logEntry0.getLevel());
      assertNull(logEntry0.getServiceName());
      assertEquals("", logEntry0.getMessage());
      assertNotSame(logLevel0, logLevel1);
      assertNotSame(logLevel1, logLevel0);
      assertSame(instant0, instant1);
      assertSame(instant1, instant0);
      assertFalse(logLevel0.equals((Object)logLevel1));
      assertFalse(logLevel1.equals((Object)logLevel0));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test1()  throws Throwable  {
      CentralLogStore centralLogStore0 = new CentralLogStore();
      assertNotNull(centralLogStore0);
      
      LogLevel logLevel0 = LogLevel.DEBUG;
      LogAggregator logAggregator0 = new LogAggregator(centralLogStore0, logLevel0);
      assertNotNull(logAggregator0);
      
      LogLevel logLevel1 = LogLevel.DEBUG;
      LogEntry logEntry0 = new LogEntry((String) null, logLevel1, (String) null, (LocalDateTime) null);
      assertNull(logEntry0.getMessage());
      assertNull(logEntry0.getServiceName());
      assertEquals(LogLevel.DEBUG, logEntry0.getLevel());
      assertEquals("LogEntry(serviceName=null, level=DEBUG, message=null, timestamp=null)", logEntry0.toString());
      assertNotNull(logEntry0);
      
      logAggregator0.collectLog(logEntry0);
      assertNull(logEntry0.getMessage());
      assertNull(logEntry0.getServiceName());
      assertEquals(LogLevel.DEBUG, logEntry0.getLevel());
      assertEquals("LogEntry(serviceName=null, level=DEBUG, message=null, timestamp=null)", logEntry0.toString());
      assertSame(logLevel0, logLevel1);
      assertSame(logLevel1, logLevel0);
      
      logAggregator0.stop();
      assertSame(logLevel0, logLevel1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test2()  throws Throwable  {
      CentralLogStore centralLogStore0 = new CentralLogStore();
      assertNotNull(centralLogStore0);
      
      LogLevel logLevel0 = LogLevel.ERROR;
      LogAggregator logAggregator0 = new LogAggregator(centralLogStore0, logLevel0);
      assertNotNull(logAggregator0);
      
      LogEntry logEntry0 = new LogEntry("Log level below threshold. Skipping.", logLevel0, "Log level below threshold. Skipping.", (LocalDateTime) null);
      assertEquals(LogLevel.ERROR, logEntry0.getLevel());
      assertEquals("Log level below threshold. Skipping.", logEntry0.getMessage());
      assertEquals("Log level below threshold. Skipping.", logEntry0.getServiceName());
      assertEquals("LogEntry(serviceName=Log level below threshold. Skipping., level=ERROR, message=Log level below threshold. Skipping., timestamp=null)", logEntry0.toString());
      assertNotNull(logEntry0);
      
      logEntry0.setTimestamp((LocalDateTime) null);
      assertEquals(LogLevel.ERROR, logEntry0.getLevel());
      assertEquals("Log level below threshold. Skipping.", logEntry0.getMessage());
      assertEquals("Log level below threshold. Skipping.", logEntry0.getServiceName());
      assertEquals("LogEntry(serviceName=Log level below threshold. Skipping., level=ERROR, message=Log level below threshold. Skipping., timestamp=null)", logEntry0.toString());
      
      logAggregator0.collectLog(logEntry0);
      assertEquals(LogLevel.ERROR, logEntry0.getLevel());
      assertEquals("Log level below threshold. Skipping.", logEntry0.getMessage());
      assertEquals("Log level below threshold. Skipping.", logEntry0.getServiceName());
      assertEquals("LogEntry(serviceName=Log level below threshold. Skipping., level=ERROR, message=Log level below threshold. Skipping., timestamp=null)", logEntry0.toString());
      
      logEntry0.setServiceName("{6=}PJg4NEK[7[");
      assertEquals(LogLevel.ERROR, logEntry0.getLevel());
      assertEquals("{6=}PJg4NEK[7[", logEntry0.getServiceName());
      assertEquals("Log level below threshold. Skipping.", logEntry0.getMessage());
      assertEquals("LogEntry(serviceName={6=}PJg4NEK[7[, level=ERROR, message=Log level below threshold. Skipping., timestamp=null)", logEntry0.toString());
      
      logAggregator0.collectLog(logEntry0);
      assertEquals(LogLevel.ERROR, logEntry0.getLevel());
      assertEquals("{6=}PJg4NEK[7[", logEntry0.getServiceName());
      assertEquals("Log level below threshold. Skipping.", logEntry0.getMessage());
      assertEquals("LogEntry(serviceName={6=}PJg4NEK[7[, level=ERROR, message=Log level below threshold. Skipping., timestamp=null)", logEntry0.toString());
      
      logAggregator0.collectLog(logEntry0);
      assertEquals(LogLevel.ERROR, logEntry0.getLevel());
      assertEquals("{6=}PJg4NEK[7[", logEntry0.getServiceName());
      assertEquals("Log level below threshold. Skipping.", logEntry0.getMessage());
      assertEquals("LogEntry(serviceName={6=}PJg4NEK[7[, level=ERROR, message=Log level below threshold. Skipping., timestamp=null)", logEntry0.toString());
      
      logAggregator0.stop();
      centralLogStore0.displayLogs();
      logAggregator0.collectLog(logEntry0);
      assertEquals(LogLevel.ERROR, logEntry0.getLevel());
      assertEquals("{6=}PJg4NEK[7[", logEntry0.getServiceName());
      assertEquals("Log level below threshold. Skipping.", logEntry0.getMessage());
      assertEquals("LogEntry(serviceName={6=}PJg4NEK[7[, level=ERROR, message=Log level below threshold. Skipping., timestamp=null)", logEntry0.toString());
      
      LogLevel logLevel1 = LogLevel.INFO;
      logEntry0.setLevel(logLevel1);
      assertEquals("LogEntry(serviceName={6=}PJg4NEK[7[, level=INFO, message=Log level below threshold. Skipping., timestamp=null)", logEntry0.toString());
      assertEquals(LogLevel.INFO, logEntry0.getLevel());
      assertEquals("{6=}PJg4NEK[7[", logEntry0.getServiceName());
      assertEquals("Log level below threshold. Skipping.", logEntry0.getMessage());
      assertNotSame(logLevel0, logLevel1);
      assertNotSame(logLevel1, logLevel0);
      assertFalse(logLevel0.equals((Object)logLevel1));
      assertFalse(logLevel1.equals((Object)logLevel0));
      
      logAggregator0.stop();
      assertNotSame(logLevel0, logLevel1);
      assertFalse(logLevel0.equals((Object)logLevel1));
      
      logAggregator0.stop();
      assertNotSame(logLevel0, logLevel1);
      assertFalse(logLevel0.equals((Object)logLevel1));
      
      logAggregator0.stop();
      assertNotSame(logLevel0, logLevel1);
      assertFalse(logLevel0.equals((Object)logLevel1));
      
      logAggregator0.collectLog(logEntry0);
      assertEquals("LogEntry(serviceName={6=}PJg4NEK[7[, level=INFO, message=Log level below threshold. Skipping., timestamp=null)", logEntry0.toString());
      assertEquals(LogLevel.INFO, logEntry0.getLevel());
      assertEquals("{6=}PJg4NEK[7[", logEntry0.getServiceName());
      assertEquals("Log level below threshold. Skipping.", logEntry0.getMessage());
      assertNotSame(logLevel0, logLevel1);
      assertFalse(logLevel0.equals((Object)logLevel1));
      
      logAggregator0.collectLog(logEntry0);
      assertEquals("LogEntry(serviceName={6=}PJg4NEK[7[, level=INFO, message=Log level below threshold. Skipping., timestamp=null)", logEntry0.toString());
      assertEquals(LogLevel.INFO, logEntry0.getLevel());
      assertEquals("{6=}PJg4NEK[7[", logEntry0.getServiceName());
      assertEquals("Log level below threshold. Skipping.", logEntry0.getMessage());
      assertNotSame(logLevel0, logLevel1);
      assertFalse(logLevel0.equals((Object)logLevel1));
      
      logAggregator0.stop();
      assertNotSame(logLevel0, logLevel1);
      assertFalse(logLevel0.equals((Object)logLevel1));
      
      logAggregator0.stop();
      assertNotSame(logLevel0, logLevel1);
      assertFalse(logLevel0.equals((Object)logLevel1));
      
      logAggregator0.stop();
      assertNotSame(logLevel0, logLevel1);
      assertFalse(logLevel0.equals((Object)logLevel1));
      
      logAggregator0.collectLog(logEntry0);
      assertEquals("LogEntry(serviceName={6=}PJg4NEK[7[, level=INFO, message=Log level below threshold. Skipping., timestamp=null)", logEntry0.toString());
      assertEquals(LogLevel.INFO, logEntry0.getLevel());
      assertEquals("{6=}PJg4NEK[7[", logEntry0.getServiceName());
      assertEquals("Log level below threshold. Skipping.", logEntry0.getMessage());
      assertNotSame(logLevel0, logLevel1);
      assertFalse(logLevel0.equals((Object)logLevel1));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test3()  throws Throwable  {
      LogLevel logLevel0 = LogLevel.INFO;
      LogAggregator logAggregator0 = new LogAggregator((CentralLogStore) null, logLevel0);
      assertNotNull(logAggregator0);
      
      LogLevel logLevel1 = LogLevel.DEBUG;
      ZoneId zoneId0 = ZoneId.systemDefault();
      assertNotNull(zoneId0);
      
      LocalDateTime localDateTime0 = MockLocalDateTime.now(zoneId0);
      assertNotNull(localDateTime0);
      
      LogEntry logEntry0 = new LogEntry("", logLevel1, "IDv?}QA5FjC@){6", localDateTime0);
      assertEquals("LogEntry(serviceName=, level=DEBUG, message=IDv?}QA5FjC@){6, timestamp=2014-02-14T20:21:21.320)", logEntry0.toString());
      assertEquals("IDv?}QA5FjC@){6", logEntry0.getMessage());
      assertEquals(LogLevel.DEBUG, logEntry0.getLevel());
      assertEquals("", logEntry0.getServiceName());
      assertNotNull(logEntry0);
      assertFalse(logLevel1.equals((Object)logLevel0));
      
      logAggregator0.collectLog(logEntry0);
      assertEquals("LogEntry(serviceName=, level=DEBUG, message=IDv?}QA5FjC@){6, timestamp=2014-02-14T20:21:21.320)", logEntry0.toString());
      assertEquals("IDv?}QA5FjC@){6", logEntry0.getMessage());
      assertEquals(LogLevel.DEBUG, logEntry0.getLevel());
      assertEquals("", logEntry0.getServiceName());
      assertNotSame(logLevel0, logLevel1);
      assertNotSame(logLevel1, logLevel0);
      assertFalse(logLevel0.equals((Object)logLevel1));
      assertFalse(logLevel1.equals((Object)logLevel0));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test4()  throws Throwable  {
      CentralLogStore centralLogStore0 = new CentralLogStore();
      assertNotNull(centralLogStore0);
      
      LogLevel logLevel0 = LogLevel.ERROR;
      LogEntry logEntry0 = null;
      centralLogStore0.storeLog((LogEntry) null);
      LogAggregator logAggregator0 = new LogAggregator(centralLogStore0, logLevel0);
      assertNotNull(logAggregator0);
      
      logAggregator0.stop();
      // Undeclared exception!
      try { 
        logAggregator0.collectLog((LogEntry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.iluwatar.logaggregation.LogAggregator", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test5()  throws Throwable  {
      CentralLogStore centralLogStore0 = new CentralLogStore();
      assertNotNull(centralLogStore0);
      
      LogLevel logLevel0 = LogLevel.INFO;
      LogAggregator logAggregator0 = new LogAggregator(centralLogStore0, logLevel0);
      assertNotNull(logAggregator0);
      
      LogLevel logLevel1 = LogLevel.DEBUG;
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
      assertNotNull(zoneOffset0);
      
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond(0L, 0, zoneOffset0);
      assertNotNull(localDateTime0);
      
      LogEntry logEntry0 = new LogEntry("", logLevel1, "", localDateTime0);
      assertEquals("", logEntry0.getServiceName());
      assertEquals("LogEntry(serviceName=, level=DEBUG, message=, timestamp=1970-01-01T00:00)", logEntry0.toString());
      assertEquals(LogLevel.DEBUG, logEntry0.getLevel());
      assertEquals("", logEntry0.getMessage());
      assertNotNull(logEntry0);
      assertFalse(logLevel1.equals((Object)logLevel0));
      
      logAggregator0.collectLog(logEntry0);
      assertEquals("", logEntry0.getServiceName());
      assertEquals("LogEntry(serviceName=, level=DEBUG, message=, timestamp=1970-01-01T00:00)", logEntry0.toString());
      assertEquals(LogLevel.DEBUG, logEntry0.getLevel());
      assertEquals("", logEntry0.getMessage());
      assertNotSame(logLevel0, logLevel1);
      assertNotSame(logLevel1, logLevel0);
      assertFalse(logLevel0.equals((Object)logLevel1));
      assertFalse(logLevel1.equals((Object)logLevel0));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test6()  throws Throwable  {
      CentralLogStore centralLogStore0 = new CentralLogStore();
      centralLogStore0.displayLogs();
      LogLevel logLevel0 = LogLevel.DEBUG;
      LogAggregator logAggregator0 = new LogAggregator(centralLogStore0, logLevel0);
      String string0 = "$5(PL0";
      LocalDateTime localDateTime0 = null;
      LogEntry logEntry0 = new LogEntry("", logLevel0, "$5(PL0", (LocalDateTime) null);
      LogEntry logEntry1 = new LogEntry("", logLevel0, "fe.(&]s>_x2", (LocalDateTime) null);
      logAggregator0.collectLog(logEntry1);
      // Undeclared exception!
      try { 
        logAggregator0.collectLog((LogEntry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.iluwatar.logaggregation.LogAggregator", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test7()  throws Throwable  {
      CentralLogStore centralLogStore0 = new CentralLogStore();
      centralLogStore0.displayLogs();
      centralLogStore0.displayLogs();
      LogLevel logLevel0 = LogLevel.DEBUG;
      LogAggregator logAggregator0 = new LogAggregator(centralLogStore0, logLevel0);
      logAggregator0.stop();
      logAggregator0.stop();
      LogLevel logLevel1 = LogLevel.INFO;
      LogEntry logEntry0 = new LogEntry("4SCV1?s%", logLevel1, "|f\"d;^#", (LocalDateTime) null);
      logAggregator0.stop();
      logEntry0.setTimestamp((LocalDateTime) null);
      logEntry0.setLevel(logLevel0);
      LogEntry logEntry1 = new LogEntry("|f\"d;^#", logLevel0, "Received null log entry. Skipping.", (LocalDateTime) null);
      centralLogStore0.storeLog(logEntry1);
      logAggregator0.collectLog(logEntry0);
      logAggregator0.collectLog(logEntry0);
      assertEquals(LogLevel.DEBUG, logEntry0.getLevel());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test8()  throws Throwable  {
      CentralLogStore centralLogStore0 = new CentralLogStore();
      LogLevel logLevel0 = LogLevel.INFO;
      LogAggregator logAggregator0 = new LogAggregator(centralLogStore0, logLevel0);
      String string0 = "com.iluwatar.logaggregation.LogEntry";
      Month month0 = Month.JULY;
      // Undeclared exception!
      try { 
        MockLocalDateTime.of(1155, month0, 0, 0, 1);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for DayOfMonth (valid values 1 - 28/31): 0
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test9()  throws Throwable  {
      CentralLogStore centralLogStore0 = new CentralLogStore();
      LogLevel logLevel0 = LogLevel.INFO;
      LogAggregator logAggregator0 = new LogAggregator(centralLogStore0, logLevel0);
      logAggregator0.stop();
      String string0 = "";
      centralLogStore0.displayLogs();
      LogLevel logLevel1 = LogLevel.ERROR;
      String string1 = null;
      // Undeclared exception!
      try { 
        MockLocalDateTime.of(857, 857, 0, 857, 3336, 3336);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): 857
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }
}
