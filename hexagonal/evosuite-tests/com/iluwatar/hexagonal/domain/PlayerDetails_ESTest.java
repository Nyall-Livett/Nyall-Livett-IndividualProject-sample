/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 16 15:50:33 GMT 2024
 */

package com.iluwatar.hexagonal.domain;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import com.iluwatar.hexagonal.domain.PlayerDetails;
import org.evosuite.runtime.EvoRunnerJUnit5;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.jupiter.api.extension.RegisterExtension;

@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class PlayerDetails_ESTest extends PlayerDetails_ESTest_scaffolding {
@RegisterExtension
  static EvoRunnerJUnit5 runner = new EvoRunnerJUnit5(PlayerDetails_ESTest.class);

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test00()  throws Throwable  {
      PlayerDetails playerDetails0 = new PlayerDetails((String) null, (String) null, (String) null);
      PlayerDetails playerDetails1 = new PlayerDetails((String) null, (String) null, "");
      boolean boolean0 = playerDetails0.equals(playerDetails1);
      assertFalse(playerDetails1.equals((Object)playerDetails0));
      assertFalse(boolean0);
      assertEquals("PlayerDetails(email=null, bankAccount=null, phoneNumber=)", playerDetails1.toString());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test01()  throws Throwable  {
      PlayerDetails playerDetails0 = new PlayerDetails((String) null, (String) null, (String) null);
      PlayerDetails playerDetails1 = new PlayerDetails((String) null, "w^,8$vm+.TE_b[2{U~", "");
      boolean boolean0 = playerDetails0.equals(playerDetails1);
      assertFalse(boolean0);
      assertEquals("PlayerDetails(email=null, bankAccount=w^,8$vm+.TE_b[2{U~, phoneNumber=)", playerDetails1.toString());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test02()  throws Throwable  {
      PlayerDetails playerDetails0 = new PlayerDetails((String) null, (String) null, (String) null);
      String string0 = playerDetails0.getPhoneNumber();
      assertNull(string0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test03()  throws Throwable  {
      PlayerDetails playerDetails0 = new PlayerDetails("", (String) null, "com.iluwatar.hexagonal.domain.PlayerDetails");
      playerDetails0.getPhoneNumber();
      assertEquals("PlayerDetails(email=, bankAccount=null, phoneNumber=com.iluwatar.hexagonal.domain.PlayerDetails)", playerDetails0.toString());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test04()  throws Throwable  {
      PlayerDetails playerDetails0 = new PlayerDetails((String) null, (String) null, (String) null);
      String string0 = playerDetails0.getEmail();
      assertNull(string0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test05()  throws Throwable  {
      PlayerDetails playerDetails0 = new PlayerDetails("rPV'b8", "rPV'b8", "");
      playerDetails0.getEmail();
      assertEquals("PlayerDetails(email=rPV'b8, bankAccount=rPV'b8, phoneNumber=)", playerDetails0.toString());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test06()  throws Throwable  {
      PlayerDetails playerDetails0 = new PlayerDetails("", (String) null, "com.iluwatar.hexagonal.domain.PlayerDetails");
      playerDetails0.getBankAccount();
      assertEquals("PlayerDetails(email=, bankAccount=null, phoneNumber=com.iluwatar.hexagonal.domain.PlayerDetails)", playerDetails0.toString());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test07()  throws Throwable  {
      PlayerDetails playerDetails0 = new PlayerDetails("", "ot_R5q#)M", "+U48M)r;JQ");
      playerDetails0.getBankAccount();
      assertEquals("PlayerDetails(email=, bankAccount=ot_R5q#)M, phoneNumber=+U48M)r;JQ)", playerDetails0.toString());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test08()  throws Throwable  {
      PlayerDetails playerDetails0 = new PlayerDetails("", "", "");
      boolean boolean0 = playerDetails0.canEqual(playerDetails0);
      assertTrue(boolean0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test09()  throws Throwable  {
      PlayerDetails playerDetails0 = new PlayerDetails("", "", "");
      Object object0 = new Object();
      boolean boolean0 = playerDetails0.canEqual(object0);
      assertFalse(boolean0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test10()  throws Throwable  {
      PlayerDetails playerDetails0 = new PlayerDetails("", "", "");
      String string0 = playerDetails0.getBankAccount();
      assertEquals("", string0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test11()  throws Throwable  {
      PlayerDetails playerDetails0 = new PlayerDetails("", "", "");
      String string0 = playerDetails0.getPhoneNumber();
      assertEquals("", string0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test12()  throws Throwable  {
      PlayerDetails playerDetails0 = new PlayerDetails("", "", "");
      String string0 = playerDetails0.getEmail();
      assertEquals("", string0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test13()  throws Throwable  {
      PlayerDetails playerDetails0 = new PlayerDetails("WiRFS2`k", "", "");
      PlayerDetails playerDetails1 = new PlayerDetails("WiRFS2`k", "", "");
      boolean boolean0 = playerDetails0.equals(playerDetails1);
      assertTrue(boolean0);
      assertEquals("PlayerDetails(email=WiRFS2`k, bankAccount=, phoneNumber=)", playerDetails1.toString());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test14()  throws Throwable  {
      PlayerDetails playerDetails0 = new PlayerDetails(":M %zJbVbcUJo", ":M %zJbVbcUJo", ":M %zJbVbcUJo");
      PlayerDetails playerDetails1 = new PlayerDetails(":M %zJbVbcUJo", (String) null, (String) null);
      boolean boolean0 = playerDetails0.equals(playerDetails1);
      assertFalse(boolean0);
      assertEquals("PlayerDetails(email=:M %zJbVbcUJo, bankAccount=null, phoneNumber=null)", playerDetails1.toString());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test15()  throws Throwable  {
      PlayerDetails playerDetails0 = new PlayerDetails("e", "e", "e");
      PlayerDetails playerDetails1 = new PlayerDetails("bv8hUiEUryp;mD /~", "e", "bv8hUiEUryp;mD /~");
      boolean boolean0 = playerDetails0.equals(playerDetails1);
      assertEquals("PlayerDetails(email=bv8hUiEUryp;mD /~, bankAccount=e, phoneNumber=bv8hUiEUryp;mD /~)", playerDetails1.toString());
      assertFalse(boolean0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test16()  throws Throwable  {
      PlayerDetails playerDetails0 = new PlayerDetails((String) null, (String) null, (String) null);
      PlayerDetails playerDetails1 = new PlayerDetails((String) null, (String) null, (String) null);
      boolean boolean0 = playerDetails0.equals(playerDetails1);
      assertTrue(boolean0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test17()  throws Throwable  {
      PlayerDetails playerDetails0 = new PlayerDetails((String) null, ":M zbVbrcUo", ":M zbVbrcUo");
      PlayerDetails playerDetails1 = new PlayerDetails(":M zbVbrcUo", ":M zbVbrcUo", ":M zbVbrcUo");
      boolean boolean0 = playerDetails0.equals(playerDetails1);
      assertEquals("PlayerDetails(email=null, bankAccount=:M zbVbrcUo, phoneNumber=:M zbVbrcUo)", playerDetails0.toString());
      assertFalse(playerDetails1.equals((Object)playerDetails0));
      assertFalse(boolean0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test18()  throws Throwable  {
      PlayerDetails playerDetails0 = new PlayerDetails("", "", "");
      Object object0 = new Object();
      boolean boolean0 = playerDetails0.equals(object0);
      assertFalse(boolean0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test19()  throws Throwable  {
      PlayerDetails playerDetails0 = new PlayerDetails("", "", "");
      boolean boolean0 = playerDetails0.equals(playerDetails0);
      assertTrue(boolean0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test20()  throws Throwable  {
      PlayerDetails playerDetails0 = new PlayerDetails((String) null, (String) null, (String) null);
      playerDetails0.hashCode();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test21()  throws Throwable  {
      PlayerDetails playerDetails0 = new PlayerDetails("", "", "");
      playerDetails0.hashCode();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test22()  throws Throwable  {
      PlayerDetails playerDetails0 = new PlayerDetails("", "", "");
      PlayerDetails playerDetails1 = new PlayerDetails("", "", "nq[zwfcP$");
      boolean boolean0 = playerDetails0.equals(playerDetails1);
      assertFalse(playerDetails1.equals((Object)playerDetails0));
      assertEquals("PlayerDetails(email=, bankAccount=, phoneNumber=nq[zwfcP$)", playerDetails1.toString());
      assertFalse(boolean0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test23()  throws Throwable  {
      PlayerDetails playerDetails0 = new PlayerDetails("", "", "");
      String string0 = playerDetails0.toString();
      assertEquals("PlayerDetails(email=, bankAccount=, phoneNumber=)", string0);
  }
}
