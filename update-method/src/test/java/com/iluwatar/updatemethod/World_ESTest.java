/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 16 14:29:34 GMT 2024
 */

package com.iluwatar.updatemethod;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iluwatar.updatemethod.Entity;
import com.iluwatar.updatemethod.Skeleton;
import com.iluwatar.updatemethod.Statue;
import com.iluwatar.updatemethod.World;
import java.util.List;
import org.evosuite.runtime.EvoRunnerJUnit5;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.jupiter.api.extension.RegisterExtension;

 
public class World_ESTest  {


  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test0()  throws Throwable  {
      World world0 = new World();
      Statue statue0 = new Statue(0, (-1405));
      List<Entity> list0 = List.of((Entity) statue0, (Entity) statue0, (Entity) statue0, (Entity) statue0, (Entity) statue0);
      world0.entities = list0;
      Skeleton skeleton0 = new Skeleton(207);
      // Undeclared exception!
      try { 
        world0.addEntity(skeleton0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ImmutableCollections", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test1()  throws Throwable  {
      World world0 = new World();
      world0.entities = null;
      // Undeclared exception!
      try { 
        world0.addEntity((Entity) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.iluwatar.updatemethod.World", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test2()  throws Throwable  {
      World world0 = new World();
      Skeleton skeleton0 = new Skeleton(1, 1230);
      world0.addEntity(skeleton0);
      assertEquals(1230, skeleton0.getPosition());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test3()  throws Throwable  {
      World world0 = new World();
      world0.run();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test4()  throws Throwable  {
      World world0 = new World();
      world0.stop();
  }
}
