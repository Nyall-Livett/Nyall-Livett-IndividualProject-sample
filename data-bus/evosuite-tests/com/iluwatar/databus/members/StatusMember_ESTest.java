/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 16 17:17:13 GMT 2024
 */

package com.iluwatar.databus.members;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import com.iluwatar.databus.AbstractDataType;
import com.iluwatar.databus.DataBus;
import com.iluwatar.databus.DataType;
import com.iluwatar.databus.data.StartingData;
import com.iluwatar.databus.data.StoppingData;
import com.iluwatar.databus.members.StatusMember;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import org.evosuite.runtime.EvoRunnerJUnit5;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.junit.jupiter.api.extension.RegisterExtension;

@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class StatusMember_ESTest extends StatusMember_ESTest_scaffolding {
@RegisterExtension
  static EvoRunnerJUnit5 runner = new EvoRunnerJUnit5(StatusMember_ESTest.class);

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test0()  throws Throwable  {
      StatusMember statusMember0 = new StatusMember((-480));
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      DataType dataType0 = StartingData.of(localDateTime0);
      statusMember0.accept(dataType0);
      statusMember0.getStarted();
      assertEquals((-480), statusMember0.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test1()  throws Throwable  {
      StatusMember statusMember0 = new StatusMember(0);
      int int0 = statusMember0.getId();
      assertEquals(0, int0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test2()  throws Throwable  {
      StatusMember statusMember0 = new StatusMember((-863));
      int int0 = statusMember0.getId();
      assertEquals((-863), int0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test3()  throws Throwable  {
      StatusMember statusMember0 = new StatusMember(186);
      AbstractDataType abstractDataType0 = new AbstractDataType();
      statusMember0.accept((DataType) abstractDataType0);
      assertEquals(186, statusMember0.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test4()  throws Throwable  {
      StatusMember statusMember0 = new StatusMember(448);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(448);
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      StoppingData stoppingData0 = new StoppingData(localDateTime0);
      DataBus dataBus0 = DataBus.getInstance();
      stoppingData0.setDataBus(dataBus0);
      statusMember0.accept((DataType) stoppingData0);
      LocalDateTime localDateTime1 = statusMember0.getStopped();
      assertNotNull(localDateTime1);
      assertEquals(448, statusMember0.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test5()  throws Throwable  {
      StatusMember statusMember0 = new StatusMember(448);
      statusMember0.getStopped();
      assertEquals(448, statusMember0.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test6()  throws Throwable  {
      StatusMember statusMember0 = new StatusMember((-480));
      statusMember0.getStarted();
      assertEquals((-480), statusMember0.getId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test7()  throws Throwable  {
      StatusMember statusMember0 = new StatusMember(448);
      int int0 = statusMember0.getId();
      assertEquals(448, int0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void test8()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      StoppingData stoppingData0 = new StoppingData(localDateTime0);
      StatusMember statusMember0 = new StatusMember(1101);
      // Undeclared exception!
      try { 
        statusMember0.accept((DataType) stoppingData0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.iluwatar.databus.members.StatusMember", e);
      }
  }
}
